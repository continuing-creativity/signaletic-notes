{
    type: "signal.signal",

    signals: {
        carrier: {
            type: "signal.oscillator",
            options: {
                shape: "saw", // TODO: This property is actually "type"!
                frequency: 440
            }
        },

        ampEnv: {
            // In its first implementation, this signal
            // will wrap a GainNode and provide automation for
            // its gain AudioParam to perform the enveloping.
            //
            // Future implementations may include a generic,
            // AudioWorklet based gateable Envelope Generator signal.
            type: "signal.adsr",
            options: {
                // These, of course, will have sensible defaults so
                // we won't have to explicitly define all properties.
                startLevel: 0.0,
                attackTime: 0.1,
                attackLevel: 1.0,
                decayTime: 0.1,
                sustainLevel: 0.8,
                releaseTime: 0.1,
                releaseLevel: 0.0
            }
        }
    },

    // osc -> ampEnv -> audioContextDestination
    connections: {
        "{carrier}.0": "{ampEnv}.0",
        "{ampEnv}.0": "{audioContextDestination}.0"
    }
}
